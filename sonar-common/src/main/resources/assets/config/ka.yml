#
#   /$$$$$$
#  /$$__  $$
# | $$  \__/  /$$$$$$  /$$$$$$$   /$$$$$$   /$$$$$$
# |  $$$$$$  /$$__  $$| $$__  $$ |____  $$ /$$__  $$
#  \____  $$| $$  \ $$| $$  \ $$  /$$$$$$$| $$  \__/
#  /$$  \ $$| $$  | $$| $$  | $$ /$$__  $$| $$
# |  $$$$$$/|  $$$$$$/| $$  | $$|  $$$$$$$| $$
#  \______/  \______/ |__/  |__/ \_______/|__/
#
# დახმარება გჭირდება ან კითხვა გაქვს? https://jonesdev.xyz/discord
# საწყისი კოდი: https://github.com/jonesdevelopment/sonar
# Copyright Jones Development and Sonar Contributors, licensed under GPL-3.0
#

# ზოგადი პარამეტრები Sonar-ისთვის
general:
  # შეამოწმოს თუ არა სონარმა ავტომატურად ახალი განახლებები?
  # სონარი იყენებს GitHub API_ს რომ შეამოწმოს არის თუ არა ამჟამინდელი ვერსია ყველაზე ახალი.
  check-for-updates: true
  # უნდა ჩაწეროს თუ არა Sonar-მა მოთამაშეების IP მისამართები კონსოლში?
  log-player-addresses: true
  # ერთი და იგივე IP ზე ონლაინ მოთამაშეთა მაქსიმალური რაოდენობა
  max-online-per-ip: 3

# მნიშვნელოვანი პარამეტრები თავდასხმის დაფიქსირებისთვის
# შეცვალეთ ეს მხოლოდ იმ შემთხვევაში, თუ იცით, რას აკეთებთ
attack-tracker:
  # ახალი მოთამაშეების მინიმალური რაოდენობა, რათა დაფიქსირდეს შეტევა
  min-players-for-attack: 8
  # დრო, რის შემდეგაც შეტევა დასრულებული ჩაითვლება
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  min-attack-duration: 30000
  # რამდენჯერ უნდა მოხდეს ინციდენტის დარეპორტება, რათა ჩაითვალოს ეს თავდასხმად
  # ეს რიცხვი მოქმედებს ყალბი თავდასხმის შეტყობინებების გასაფილტრად
  min-attack-threshold: 2
  # დრო, რომელიც უნდა გავიდეს ახალი შეტევის დასადგენად
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  attack-cooldown-delay: 3000

# თქვენ შეგიძლიათ დააკავშიროთ Sonar მონაცემთა ბაზას, რომ შეინახოთ ვერიფირებული მოთამაშეები თქვენი სერვერის გადატვირთვის შემდეგაც კი
# შენიშვნა: IP მისამართები ინახება უბრალო ტექსტში. თქვენ ხართ პასუხისმგებელი თქვენი მონაცემთა ბაზის უსაფრთხოებაზე!
database:
  # მონაცემთა ბაზის ტიპები, რომლებიც Sonar-ს შეუძლია გამოიყენოს უკვე შემოწმებული მოთამაშეების შესანახად
  # შესაძლო ტიპები: NONE, MYSQL, MARIADB, H2
  type: NONE
  # ფაილი სონარ_ის ფოლდერში რომელიც ინახავს H2 database_ს
  filename: verified_players
  # ჰოსტის მისამართი SQL მონაცემთა ბაზის ავთენტიფიკაციისთვის
  host: localhost
  # პორტი SQL მონაცემთა ბაზის ავთენტიფიკაციისთვის
  port: 3306
  # SQL მონაცემთა ბაზის სახელი
  name: sonar
  # მომხმარებლის სახელი SQL მონაცემთა ბაზის ავთენტიფიკაციისთვის
  username: ''
  # პაროლი SQL მონაცემთა ბაზის ავთენტიფიკაციისთვის
  password: ''
  # რამდენი დღე უნდა შეინახოს Sonar-მა შემოწმებული მოთამაშეები მონაცემთა ბაზაში?
  maximum-age: 5

# ყოველი ახალი შესვლის მოთხოვნა იქნება რიგში, რათა თავიდან აიცილოთ შემოსვლის სპამის შეტევები
# რიგი განახლდება ყოველ 1000 მილიწამში (20 ტიკი)
queue:
  # ახალი მოთამაშეების მაქსიმალური რაოდენობა, რომლებსაც შეუძლიათ შესვლა სერვერზე ყოველ 1000 მილიწამში
  max-polls: 30

# ყოველი ახალი მოთამაშე, რომელიც პირველად შემოვა, გაიგზავნება
# ლიმბო სერვერში, სადაც მოთამაშეების ვერიფიკაცია ხდება
verification:
  # როდის უნდა გადაამოწმოს Sonar-მა ახალი მოთამაშეები?
  # შესაძლო ტიპები: ALWAYS, DURING_ATTACK, NEVER
  # - ALWAYS (ყოველთვის): ახალი მოთამაშეები ყოველთვის მოწმდება (რეკომენდებულია)
  # - DURING_ATTACK (შეტევის დროს): ახალი მოთამაშეები შემოწმდებიან მხოლოდ შეტევის დროს
  # - NEVER (არასდროს): ახალი მოთამაშეები არასდროს შემოწმდებიან
  timing: ALWAYS
  checks:
    # ამოწმებს, მიჰყვება თუ არა მოთამაშეების ვარდნის მოძრაობა Minecraft-ის გრავიტაციის ფორმულას
    # ყველა პროგნოზირებული მოძრაობა წინასწარ არის გათვლილი შესრულების სისწრაფის შესანარჩუნებლად
    gravity:
      # უნდა შეამოწმოს თუ არა Sonar-მა მოთამაშის (ან ბოტის) გრავიტაცია? (რეკომენდებულია)
      enabled: true
      # უნდა შეამოწმოს თუ არა Sonar-მა, ეტაკება თუ არა მოთამაშე ბლოკებს?
      check-collisions: true
      # უნდა აიძულოს თუ არა Sonar-მა მოთამაშეს შეასრულოს CAPTCHA, თუ ისინი ვერ შეასრულებენ სიმძიმის შემოწმებას?
      captcha-on-fail: false
      # ტიკების მაქსიმალური რაოდენობა რომელითაც მოთამაშე უნდა დაეცეს, რათა პლატფორმაზე დაცემა შეეძლოს. (20 ტიკი = 1 წამი)
      max-movement-ticks: 8
      # მოთამაშის თამაშის რეჟიმი გადამოწმების დროს
      # შესაძლო ტიპები: SURVIVAL, CREATIVE, ADVENTURE
      # - SURVIVAL: ყველა UI კომპონენტი ჩანს
      # - CREATIVE: სიცოცხლის და საჭმლის მაჩვენებლები იშლება
      # - ADVENTURE: ყველა UI კომპონენტი ჩანს
      gamemode: ADVENTURE

    # ამოწმებს, აგზავნის თუ არა კლიენტი შესაბამის პაკეტებს სატრანსპორტო საშუალებაზე დაჯდომის დროს
    vehicle:
      # შესაძლო ტიპები: ALWAYS, DURING_ATTACK, NEVER
      # - ALWAYS (ყოველთვის): ახალი მოთამაშეები ყოველთვის დაჯდებიან & შემოწმდებიან სატრანსპორტო საშუალებაზე
      # - DURING_ATTACK (შეტევის დროს): ახალი მოთამაშეები მხოლოდ შეტევის დროს დაჯდებიან დაჯდებიან & შემოწმდებიან სატრანსპორტო საშუალებაზე
      # - NEVER (არასდროს): ახალი მოთამაშეები არასოდეს დაჯდებიან & შემოწმდებიან სატრანსპორტო საშუალებაზე (რეკომენდებულია)
      timing: ALWAYS

    # დააწერინეთ მოთამაშეს კოდი ჩატში, რომელიც იქნება ნაჩვენები ვირტუალურ მაპზე, რომელიც ხელში ეჭირებათ
    map-captcha:
      # როდის უნდა გააკეთებინოს Sonar-მა მოთამაშეს CAPTCHA?
      # შესაძლო ტიპები: ALWAYS, DURING_ATTACK, NEVER
      # - ALWAYS (ყოველთვის): ახალი მოთამაშეები ყოველთვის მოუწევთ CAPTCHA-ს გაკეთება.
      # - DURING_ATTACK (შეტევის დროს): ახალი მოთამაშებს მოუწევთ CAPTCHA-ს გაკეთება მხოლოდ შეტევის დროს.
      # - NEVER (არასდროს): ახალ მოთამაშეებს არასდროს მოუწევთ CAPTCHA-ს გაკეთება (Recommended).
      timing: NEVER
      # ეფექტების პარამეტრები Captcha გამოსახულებაზე, რომელსაც ვანახებთ მოთამაშეს
      # თქვენ უნდა შეცვალოთ ეს მხოლოდ იმ შემთხვევაში, თუ იცით, რას აკეთებთ
      effects:
        # მატებს შემთხვევითი ხაზების ეფექტს გამოსახულებაზე
        scratches: true
        # აყენებს ტალღური ეფექტის ფილტრს (ტალღისებური ეფექტი)
        ripple: true
        # აყენებს ამობურცული ტექსტის ფილტრს (გამხრწნილი ტექსტი)
        bump: true
        # დამახინჯების ფილტრი
        distortion:
          # უნდა დაამატოს თუ არა Sonar-მა დამახინჯების ფილტრი?
          enabled: true
          # რა ფორმას უნდა გამოიყენოს Sonar-მა დამახინჯების ფილტრისთვის?
          # შესაძლო ტიპები: 0, 1, 2, 3
          # - 0: ჯვრები
          # - 1: ხაზები
          # - 2: წრეები
          # - 3: კვადრატები
          shape: 2
          # მანძილი არეულ პიქსელებს/ობიექტებს შორის
          distance: 5
          # არეული პიქსელების/ობიექტების სიხშირე
          density: 0.1
          # შერევის ხარისხი ობიექტების ფერებს შორის
          mix: 0.15
      # CAPTCHA-სთვის Sonar-ის მიერ გამოყენებული ფონური გამოსახულების ბილიკი
      # თუ გამოსახულება არ მოიძებნა, ფონად გამოყენებული იქნება noise ი
      # შეგიძლიათ უბრალოდ ჩაწეროთ ფაილის სახელი, თუ ის პლაგინის დირექტორიაშია
      background: ''
      # უნდა განსაზღვროს თუ არა Sonar-მა ავტომატურად ფონის ფერი?
      # ეს კეთდება იმისთვის, რომ შეიქმნას კონტრასტი ფონის გამოსახულებასა და ტექსტს შორის
      # თუ ეს გამორთულია, Sonar-ი გამოიყენებს შემთხვევით გრადიენტს ფერებისთვის
      auto-color: false
      # რამდენი პასუხი უნდა მოამზადოს Sonar-მა?
      # ეს ხდება ასინქრონულად (ანუ ამის გამოთვლას სერვერი არ დაელოდება) უკანა ფონზე
      precompute: 500
      # რამდენ ხანს უნდა დაელოდოს Sonar-ი, სანამ მოთამაშე ვერ გააკეთებს წარმატებულად CAPTCHA-ს?
      # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
      max-duration: 30000
      # რამდენჯერ ვერ უდნა გაიაროს CAPTCHA მოთამაშემ სანამ ვერიფიკაციას ვერ გაივლის?
      max-tries: 3
      # სიმბოლოები (ასოები და რიცხვები), რომლებიც დაშვებულია გამოჩნდეს CAPTCHA-ს პასუხში
      # არ არის რეკომენდებული რიცხვების ან ასოების დამატება, რომლებიც შეიძლება ერთმანეთს ჰგავდეს
      dictionary: '1235689'

    # ამოწმებს, აგზავნიან თუ არა მოთამაშეები სერვერზე რეალურ მოთამაშის მეტსახელს
    client-brand:
      # უნდა შეამოწმოს თუ არა Sonar-მა ნამდვილია თუ არა მოთამაშის სახელი? (რეკომენდებულია)
      enabled: true
      # Regex-ი მოთამაშის ბრენდების დასადასტურებლად ვერიფიკაციის დროს
      valid-regex: ^[!-~ ]+$
      # მოთამაშის კლიენტის სახელის მაქსიმალური სიგრძე ვერიფიკაციის დროს
      max-length: 64

    # Regex-ი მომხმარებლის სახელების ვერიფიკაციისთვის
    valid-name-regex: ^[a-zA-Z0-9_]+$
    # Regex-ი კლიენტის ადგილის დასადასტურებლად ვერიფიკაციის დროს
    valid-locale-regex: ^[a-zA-Z_]+$
    # პინგი რამდენიც უნდა ქონდეს მოთამაშეს იმისთვის, რომ დროებით დაიბლოკოს (გავარდეს)
    # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
    max-ping: 10000
    # მაქსიმალური რაოდენობა შესვლის (LOGIN) პაკეტების, რომელიც მოთამაშემ უნდა გააგზავნოს სანამ გავარდება სერვერიდან
    max-login-packets: 256

  # თუ ჩართულია, მოთამაშე გადავა საწყის სერვერში ვერიფიკაციის წარმატებით გავლის შემდეგ
  # ეს ფუნქცია დაემატა Mojang-ის მიერ Minecraft-ის 1.20.5 ვერსიაში
  # Tutorial: https://youtu.be/aSWrzQVjGnc?t=71
  transfer:
    # უნდა გადაიყვანოს თუ არა Sonar-მა მოთამაშე საწყის სერვერზე (მათი გაგდების ნაცვლად)?
    # ამისთვის, თქვენ უნდა ჩართოთ ეს ფუნქცია თქვენი სერვერის კონფიგურაციაში
    # დამატებით, შეიძლება გინდოდეთ შეამციროთ შესვლის სიხშირის ლიმიტი
    # რომელსაც ახორციელებს Velocity ან სხვა პროქსიები/პლაგინები, რადგან ეს შეიძლება ხელს უშლიდეს
    # მოთამაშის სწორად გადაყვანას
    enabled: false
    # რომელ სერვერზე უნდა გადაიყვანოს Sonar-მა მოთამაშე ვერიფიკაციის გავლის შემდეგ?
    # გთხოვთ, შეიყვანოთ სერვერის IP მისამართი, რომლითაც მოთამაშეები ჩვეულებრივ უერთდებიან თქვენს სერვერს
    # მაგალითად, შეგიძლიათ ჩაწეროთ "mc.hypixel.net" ან პირდაპირი IP როგორიცაა "1.1.1.1"
    destination-host: "play.my-server.com"
    # რომელი პორტი უნდა გამოიყენოს Sonar-მა მოთამაშის საწყის სერვერზე გადაყვანისას?
    # თუ თქვენს სერვერს არ სჭირდება პორტი შესასვლელად, შეგიძლიათ დატოვოთ ეს 25565-ზე
    destination-port: 25565

  # Sonar caches most packets it sends to the client, including the LoginSuccess packet.
  # Which username should Sonar use for the LoginSuccess packet?
  # The username will not be visible to the player without client modifications
  cached-username: "Sonar"
  # ჩაიწეროს თუ არა Sonar-მა ახალი ვერიფიკაციის მცდელობები?
  log-connections: true
  # ჩაწეროს თუ არა Sonar-მა ახალი ვერიფიკაციის მცდელობები შეტევის დროს?
  log-during-attack: false
  # ჩაიწეროს თუ არა Sonar-მა ყოველი მოძრაობა/პოზიცია ვერიფიკაციის დროს?
  # ეს არ არის რეკომენდებული აქტიურ სერვერებისთვის, მაგრამ შეიძლება გამოსადეგი იყოს ცრუ პოსიტივების გამოსასწორებლად.
  debug-xyz-positions: false
  # უნდა შეამოწმოს თუ არა Sonar-მა Geyser (Bedrock) მოთამაშეები?
  # ეს ფუნქცია ექსპერიმენტულია და შეიძლება გამოიწვიოს პრობლემები
  # თუ ეს გამორთულია, Bedrock მოთამაშეები გამოვლენილი იქნება
  check-geyser-players: true
  # დროის ოდენობა, რომელიც უნდა გავიდეს, სერვერთან კავშირის გარეშე, სანამ მოთამაშე დროებით გავარდება სერვერიდან.
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  read-timeout: 8000
  # დრო როდიდანაც სერვერმა შეწყვიტა პაკეტების გაგზავნა სანამ გააგდებს მოთამაშეს.
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  write-timeout: 10000
  # რამდენ ხანს უნდა დაელოდოს მოთამაშე ვერიფიკაციის დროს ხელახლა დაკავშირებამდე?
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  rejoin-delay: 8000
  # რამდენ ხანს უნდა ახსოვდეს Sonar-ს მოთამაშე რამდენჯერ იყო წარუმატებელი ვერიფიკაციის დროს?
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  remember-time: 120000
  # რამდენ ხნით უნდა აეკრძალოს IP მისამართს შესვლა, როდესაც ვერიფიკაციას ძალიან ხშირად ვერ აკეთებს?
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  blacklist-time: 600000
  # რამდენად ხშირად უნდა გაიაროს მოთამაშემ ვერიფიკაცია წარუმატებლად, რომ ის მოხვდეს შავ სიაში?
  # (დააყენეთ ეს 0 ზე, რომ მთლიანად გათიშოთ შავი სია)
  blacklist-threshold: 2
  # პროტოკოლის ID-ების სია, რომლებსაც საერთოდ არ შეუძლიათ სერვერზე შემოსვლა
  # თქვენ შეგიძლიათ იპოვოთ ყველა პროტოკოლის ID-ების სრული სია აქ:
  # https://wiki.vg/Protocol_version_numbers
  # მაგალითად, Minecraft 1.20-ს აქვს ID 763.
  blacklisted-protocols: []
