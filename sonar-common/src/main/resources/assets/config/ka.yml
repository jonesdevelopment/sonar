#
#   /$$$$$$
#  /$$__  $$
# | $$  \__/  /$$$$$$  /$$$$$$$   /$$$$$$   /$$$$$$
# |  $$$$$$  /$$__  $$| $$__  $$ |____  $$ /$$__  $$
#  \____  $$| $$  \ $$| $$  \ $$  /$$$$$$$| $$  \__/
#  /$$  \ $$| $$  | $$| $$  | $$ /$$__  $$| $$
# |  $$$$$$/|  $$$$$$/| $$  | $$|  $$$$$$$| $$
#  \______/  \______/ |__/  |__/ \_______/|__/
#
# დახმარება გჭირდება ან კითხვა გაქვს? https://jonesdev.xyz/discord
# საწყისი კოდი: https://github.com/jonesdevelopment/sonar
# Copyright Jones Development and Sonar Contributors, licensed under GPL-3.0
#

# ზოგადი პარამეტრები Sonar-ისთვის
general:
  # უნდა ჩაწეროს თუ არა Sonar-მა მოთამაშეების IP მისამართები კონსოლში?
  log-player-addresses: true
  # მაქსიმალური ერთი და იგივე IP ზე ონლაინ მოთამაშეთა რაოდენობა
  max-online-per-ip: 3

# მნიშვნელოვანი პარამეტრები თავდასხმის დაფიქსირებისთვის
# შეცვალეთ ეს მხოლოდ იმ შემთხვევაში, თუ იცით, რას აკეთებთ
attack-tracker:
  # ახალი მოთამაშეების მინიმალური რაოდენობა, რათა დაფიქსირდეს შეტევა
  min-players-for-attack: 8
  # დრო, რის შემდეგაც შეტევა დასრულებული ჩაითვლება
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  min-attack-duration: 30000
  # რამდენჯერ უნდა მოხდეს ზედა პარამეტრები, რათა ჩაითვალოს ეს თავდასხმად
  # ეს რიცხვი მოქმედებს ყალბი თავდასხმის შეტყობინებების გასაფილტრად
  min-attack-threshold: 2
  # დრო, რომელიც უნდა გავიდეს ახალი შეტევის დასადგენად
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  attack-cooldown-delay: 3000

# თქვენ შეგიძლიათ დააკავშიროთ Sonar მონაცემთა ბაზას, რომ შეინახოთ ვერიფირებული მოთამაშეები თქვენი სერვერის გადატვირთვის შემდეგაც კი
# შენიშვნა: IP მისამართები ინახება უბრალო ტექსტში. თქვენ ხართ პასუხისმგებელი თქვენი მონაცემთა ბაზის უსაფრთხოებაზე!
database:
  # მონაცემთა ბაზის ტიპები, რომლებიც Sonar-ს შეუძლია გამოიყენოს ვერიფირებული მოთამაშეების შესანახად
  # შესაძლო ტიპები: NONE, MYSQL, MARIADB
  type: NONE
  # ჰოსტის მისამართი SQL მონაცემთა ბაზის ავთენტიფიკაციისთვის
  host: localhost
  # პორტი SQL მონაცემთა ბაზის ავთენტიფიკაციისთვის
  port: 3306
  # SQL მონაცემთა ბაზის სახელი
  name: sonar
  # მომხმარებლის სახელი SQL მონაცემთა ბაზის ავთენტიფიკაციისთვის
  username: ''
  # პაროლი SQL მონაცემთა ბაზის ავთენტიფიკაციისთვის
  password: ''
  # რამდენი დღე უნდა შეინახოს Sonar-მა დამოწმებული მოთამაშეები მონაცემთა ბაზაში?
  maximum-age: 5

# ყოველი ახალი შესვლის მოთხოვნა იქნება რიგში, რათა თავიდან აიცილოთ სპამის მიერთების შეტევები
# რიგი განახლდება ყოველ 500 მილიწამში (10 ტიკი)
queue:
  # ახალი მოთამაშეების მაქსიმალური რაოდენობა, რომლებსაც შეუძლიათ შესვლა სერვერზე ყოველ 500 მილიწამში
  max-polls: 30

# ყოველი ახალი მოთამაშე, რომელიც პირველად შეუერთდება, გაიგზავნება
# ლიმბო სერვერში, სადაც მოთამაშეების ვერიფიკაცია ხდება
verification:
  # როდის უნდა გადაამოწმოს Sonar-მა ახალი მოთამაშეები?
  # შესაძლო ტიპები: ALWAYS, DURING_ATTACK, NEVER
  # - ALWAYS: ახალი მოთამაშეები ყოველთვის მოწმდება (რეკომენდებულია)
  # - DURING_ATTACK: ახალი მოთამაშეები შემოწმდებიან მხოლოდ შეტევის დროს
  # - NEVER: ახალი მოთამაშეები არასოდეს შემოწმდებიან
  timing: ALWAYS
  checks:
    # ამოწმებს, მიჰყვება თუ არა მოთამაშეების დაცემის მოძრაობა Minecraft-ის გრავიტაციის ფორმულას
    # ყველა პროგნოზირებული მოძრაობა წინასწარ არის გათვლილი პერფორმანსის შესანარჩუნებლად
    gravity:
      # უნდა შეამოწმოს თუ არა Sonar-მა კლიენტის გრავიტაცია? (რეკომენდირებულია)
      enabled: true
      # უნდა შეამოწმოს თუ არა Sonar-მა, ეტაკება თუ არა მოთამაშე ბლოკებს?
      check-collisions: true
      # ტიკების მაქსიმალური რაოდენობა რომელითაც მოთამაშე უნდა დაეცეს, რათა პლატფორმაზე დაცემა შეეძლოს
      max-movement-ticks: 8
      # იგნორირებული Y მოძრაობის მაქსიმალური რაოდენობა სანამ, მოთამაშე ვერიფიკაციას ვერ გაივლის
      max-ignored-ticks: 5
      # მოთამაშის თამაშის რეჟიმი გადამოწმების დროს
      # შესაძლო ტიპები: SURVIVAL, CREATIVE, ADVENTURE
      # - SURVIVAL: ყველა UI კომპონენტი ჩანს
      # - CREATIVE: სიცოცხლის და საჭმლის მაჩვენებლები იშლება
      # - ADVENTURE: ყველა UI კომპონენტი ჩანს
      gamemode: ADVENTURE

    # დააწერინეთ მოთამაშეს კოდი ჩატში, რომელიც იქნება ნაჩვენები ვირტუალურ მაპზე, რომელიც ხელში ეჭირებად
    map-captcha:
      # როდის უნდა გააკეთებინოს Sonar-მა მოთამაშეს CAPTCHA?
      # შესაძლო ტიპები: ALWAYS, DURING_ATTACK, NEVER
      # - ALWAYS: ახალი მოთამაშეები ყოველთვის მოუწევთ CAPTCHA-ს გაკეთება
      # - DURING_ATTACK: ახალი მოთამაშებს მოუწევთ CAPTCHA-ს გაკეთება მხოლოდ შეტევის დროს
      # - NEVER: ახალ მოთამაშეებს არასდროს მოუწევთ CAPTCHA-ს გაკეთება (Recommended)
      timing: NEVER
      # მოახდინოს თუ არა Sonar-მა CAPTCHA-ს X და Y პოზიციების რანდომიზაცია?
      random-position: true
      # რამდენად უნდა დაამახინჯოს Sonar-მა სიმბოლოები (რანდომიზაციის ფაქტორი)?
      distortions-factor-x: 50
      distortions-factor-y: 50
      # რამდენი რანდომული ხაზი უნდა დახატოს Sonar-მა CAPTCHA-ს უკან?
      random-lines: 4
      # რამდენი რანდომული ოვალი უნდა დახატოს სონარმა CAPTCHA-ს უკან?
      random-ovals: 1
      # დაარანდომაიზოს Sonar-მა თუ არა შერჩევისას შრიფტის ზომა, რომელიც გამოიყენება CAPTCHA-ზე?
      random-font-size: true
      # რამდენი პასუხი უნდა მოამზადოს Sonar-მა?
      # ეს ხდება ასინქრონულად უკანა ფონზე;
      # მოთამაშეებს შეუძლიათ შესვლა, როდესაც ერთი CAPTCHA მზად არის
      precompute: 1000
      # რამდენ ხანს უნდა დაელოდოს Sonar-ი, სანამ მოთამაშე ვერ გააკეთებს წარმატებულად CAPTCHA-ს?
      # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
      max-duration: 45000
      # რამდენჯერ ვერ უდნა გაიაროს CAPTCHA მოთამაშემ სანამ ვერიფიკაციას ვერ გაივლის?
      max-tries: 3
      # სიმბოლოები (ასოები და რიცხვები), რომლებიც დაშვებულია გამოჩნდეს CAPTCHA-ს პასუხში
      dictionary: '123456789'
      # რომელი შრიფტის ტიპები უნდა გამოიყენოს Sonar-მა რუკის CAPTCHA კოდებისთვის?
      fonts:
        - Dialog
        - DialogInput
        - Serif
        - SansSerif

    #ამოწმებს, აგზავნიან თუ არა მოთამაშეები სერვერზე რეალურ კლიენტის სახელს
    client-brand:
      # უნდა შეამოწმოს თუ არა Sonar-მა ნამდვილია თუ არა მოთამაშის კლიენტის სახელი? (რეკომენდებულია)
      enabled: true
      # Regex-ი კლიენტის ბრენდების დასადასტურებლად ვერიფიკაციის დროს
      valid-regex: ^[!-~ ]+$
      # მოთამაშის კლიენტის სახელის მაქსიმალური სიგრძე ვერიფიკაციის დროს
      max-length: 64

    # Regex-ი მომხმარებლის სახელების ვერიფიკაციისთვის
    valid-name-regex: ^[a-zA-Z0-9_]+$
    # Regex-ი კლიენტის ლოკალის დასადასტურებლად ვერიფიკაციის დროს
    valid-locale-regex: ^[a-zA-Z_]+$
    # პინგი რამდენიც უნდა ქონდეს მოთამაშეს იმისთვის, რომ ტაიმაუტდეს
    # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
    max-ping: 10000
    # მაქსიმალური რაოდენობა ლოგინ პაკეტების, რომელიც მოთამაშემ უნდა გააგზავნოს სანამ გაიკიკება სერვერიდან
    max-login-packets: 256

  # ჩაიწეროს თუ არა Sonar-მა ახალი ვერიფიკაციის მცდელობები?
  log-connections: true
  # ჩაწეროს თუ არა Sonar-მა ახალი ვერიფიკაციის მცდელობები შეტევის დროს?
  log-during-attack: false
  # ჩაიწეროს თუ არა Sonar-მა ყოველი მოძრაობა/პოზიცია ვერიფიკაციის დროს?
  # ეს არ არის რეკომენდირებული აქტიურ სერვერებისთვის, მაგრამ შეიძლება გამოსადეგი იყოს ცრუ პოსიტივების გამოსასწორებლად.
  debug-xyz-positions: false
  # დროის ოდენობა, რომელიც უნდა გავიდეს, სანამ მოთამაშე ტაიმაუტდება სერვერიდან.
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  read-timeout: 3500
  # რამდენ ხანს უნდა დაელოდოს მოთამაშე ვერიფიკაციის დროს ხელახლა დაკავშირებამდე?
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  rejoin-delay: 8000
  # რამდენ ხნით უნდა აეკრძალოს IP მისამართს შესვლა, როდესაც ვერიფიკაციას ძალიან ხშირად ვერ აკეთებს?
  # (ეს არის ნაჩვენები მილიწამებში: 1 წამი = 1000 მილიწამი)
  blacklist-time: 600000
  # რამდენად ხშირად უნდა გაიაროს მოთამაშემ ვერიფიკაცია წარუმატებლად, რომ ის მოხვდეს შავ სიაში?
  # (დააყენეთ ეს 0 ზე, რომ მთლიანად გათიშოთ შავი სია)
  blacklist-threshold: 2
  # პროტოკოლის ID-ების სია, რომლებიც არ არის შემოწმებული Sonar-ის მიერ (დამოწმების შემოვლითი გზა)
  # თქვენ შეგიძლიათ იპოვოთ ყველა პროტოკოლის ID-ების სრული სია აქ:
  # https://wiki.vg/Protocol_version_numbers
  # მაგალითად, Minecraft 1.20-ს აქვს ID 763.
  whitelisted-protocols: []
  # პროტოკოლის ID-ების სია, რომლებსაც საერთოდ არ შეუძლიათ სერვერზე შემოსვლა
  blacklisted-protocols: []
