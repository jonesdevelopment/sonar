#
#   /$$$$$$
#  /$$__  $$
# | $$  \__/  /$$$$$$  /$$$$$$$   /$$$$$$   /$$$$$$
# |  $$$$$$  /$$__  $$| $$__  $$ |____  $$ /$$__  $$
#  \____  $$| $$  \ $$| $$  \ $$  /$$$$$$$| $$  \__/
#  /$$  \ $$| $$  | $$| $$  | $$ /$$__  $$| $$
# |  $$$$$$/|  $$$$$$/| $$  | $$|  $$$$$$$| $$
#  \______/  \______/ |__/  |__/ \_______/|__/
#
# Нужна помощь или есть вопросы? https://jonesdev.xyz/discord
# Исходный код: https://github.com/jonesdevelopment/sonar
# Copyright Jones Development and Sonar Contributors, licensed under GPL-3.0
#

# Основные настройки
general:
  # Должен ли Sonar автоматически проверять наличие новых обновлений?
  # Sonar использует API GitHub, чтобы проверить, не устарела ли текущая версия
  check-for-updates: true
  # Должен ли Sonar логировать IP-адреса игроков в консоли?
  log-player-addresses: true
  # Максимальное количество игроков онлайн с одного IP-адреса
  max-online-per-ip: 3

# Настройки чувствительности для трекера атак
# Редактируйте это только в том случае, если вы знаете, что делаете.
attack-tracker:
  # Минимальное количество новых игроков, чтобы атака была обнаружена
  min-players-for-attack: 8
  # Количество времени, которое должно пройти, чтобы атака закончилась
  # (Это значение представляет собой время в миллисекундах: 1 секунда = 1000 миллисекунд)
  min-attack-duration: 30000
  # Количество раз, которое необходимо сообщить об инциденте, чтобы он был признан атакой.
  # Это число служит буфером для отсеивания ложных уведомлений об атаках
  min-attack-threshold: 2
  # Количество времени, которое должно пройти, чтобы новая атака была обнаружена.
  # (Это значение представляет время в миллисекундах: 1 секунда = 1000 миллисекунд)
  attack-cooldown-delay: 3000

# Вы можете подключить Sonar к базе данных, чтобы сохранять проверенных игроков даже после перезапуска сервера.
# Примечание: IP-адреса сохраняются в виде обычного текста. Вы сами отвечаете за сохранность своей базы данных!
database:
  # Тип базы данных, которую Sonar использует для хранения проверенных игроков.
  # Возможные типы: NONE, MYSQL, MARIADB, H2
  type: NONE
  # Файл в каталоге плагинов Sonar, используемый для базы данных H2
  filename: verified_players
  # Адрес хоста для аутентификации в базе данных SQL
  host: localhost
  # Порт для аутентификации с базой данных SQL
  port: 3306
  # Имя базы данных SQL
  name: sonar
  # Имя пользователя для аутентификации в базе данных SQL
  username: ''
  # Пароль для аутентификации в базе данных SQL
  password: ''
  # Сколько дней Sonar должен хранить проверенных игроков в базе данных?
  maximum-age: 5

# Каждый новый запрос на вход на сервер будет ставиться в очередь, чтобы избежать спам-атак.
# Очередь обновляется каждые 1 секунд (20 тиков)
queue:
  # Максимальное количество одновременных опросов очереди за 1 секунд
  max-polls: 30

# Каждый новый игрок, впервые присоединившийся на сервер, будет отправлен на
# лимбо-сервер, на котором проводятся расширенные проверки ботов
verification:
  # Когда Sonar должен проверять новых игроков?
  # Возможные типы: ALWAYS, DURING_ATTACK, NEVER
  # - ALWAYS: Новые игроки будут проверяться всегда (Рекомендуется)
  # - DURING_ATTACK: Новые игроки будут проверяться только во время атаки
  # - NEVER: Новые игроки никогда не будут проверены
  timing: ALWAYS
  checks:
    # Проверяет, следует ли движение игрока формуле гравитации Minecraft.
    # Все предсказанные движения предварительно просчитываются для экономии производительности
    gravity:
      # Должен ли Sonar проверять наличие действительной гравитации клиента? (Рекомендуется)
      enabled: true
      # Должен ли Sonar заставлять игрока решать CAPTCHA, если он не проходит проверку на гравитацию?
      captcha-on-fail: false
      # Максимальное количество тиков, на которое должен упасть игрок, чтобы ему было разрешено упасть на платформу
      max-movement-ticks: 8

    # Проверяет, сталкивается ли игрок с блоками, порожденными под ним
    collision:
      # Должен ли Sonar проверять, сталкивается ли игрок с блоками? (Рекомендуется)
      enabled: true
      # Какой тип блока следует использовать в Sonar для платформы столкновений?
      # Возможные типы: STONE, BARRIER, TRAPDOOR, ENCHANTMENT_TABLE
      # Рекомендуется редактировать только если вы знаете, что делаете
      collision-block-type: TRAPDOOR

    # Проверяет, отправляет ли клиент правильные пакеты при садке на транспортное средство
    vehicle:
      # Должен ли сонар проверять, правильно ли игрок входит в лодку?
      enabled: true

    # Заставить игрока ввести код с картинки в чат
    map-captcha:
      # Когда Sonar должен заставить игрока решить CAPTCHA?
      # Возможные типы: ALWAYS, DURING_ATTACK, NEVER
      # - ALWAYS: Новые игроки всегда получают капчу
      # - DURING_ATTACK: Новые игроки будут получать капчу только во время атаки
      # - NEVER: Новые игроки никогда не получат капчу (Рекомендуется)
      timing: NEVER
      # Кастомизация эффектов на картинке, которые показываются игроку
      # Рекомендуется редактировать только если вы знаете, что делаете
      effects:
        # Добавляет случайные линии на изображение
        scratches: true
        # Применяет эффект волны (ripple)
        ripple: true
        # Применяет фильтр bump (увеличивает резкость текста)
        bump: true
        # Фильтр искажения
        distortion:
          # Следует ли применять фильтр искажения?
          enabled: true
          # Какую форму следует использовать Sonar для фильтра искажения?
          # Возможные типы: 0, 1, 2, 3
          # - 0: Кресты
          # - 1: Линии
          # - 2: Круги
          # - 3: Квадраты
          shape: 2
          # Расстояние между искаженными пикселями/объектами
          distance: 5
          # Плотность искаженных пикселей/объектов
          density: 0.1
          # Степень смешивания между цветами объектов
          mix: 0.15
      # Путь к фоновому изображению, которое использует Sonar для CAPTCHA
      # Если изображение не найдено, будет использован шум как фон по умолчанию
      background: ''
      # Следует ли Sonar автоматически определять цвет фона?
      # Это делается для создания контраста между фоновым изображением и текстом
      # Просто укажите имя файла здесь, если файл находится в каталоге плагина
      auto-color: false
      # Сколько капч должен подготовить Sonar?
      # Эта задача выполняется асинхронно в фоновом режиме
      precompute: 500
      # Как долго Sonar должен ждать, пока игрок не пройдет капча?
      # (Это значение представляет время в миллисекундах: 1 секунда = 1000 миллисекунд)
      max-duration: 30000
      # Сколько раз игрок должен завалить капчу, чтобы не пройти проверку?
      max-tries: 3
      # Символы (буквы и цифры), которые разрешено использовать в ответе на капчу
      # Не рекомендуется добавлять цифры или буквы, которые могут быть похожи друг на друга
      dictionary: '1235689'

    # Проверяет, отправляет ли игрок на сервер действительный клиентский бренд.
    client-brand:
      # Должен ли Sonar проверять наличие действительных клиентских брендов? (Рекомендуется)
      enabled: true
      # Regex для проверки брендов клиентов во время верификации
      valid-regex: ^[!-~ ]+$
      # Максимальная длина бренда клиента при проверке
      max-length: 64

    # Regex для проверки ников при верификации
    valid-name-regex: ^[a-zA-Z0-9_]+$
    # Regex для проверки локализации клиента при верификации
    valid-locale-regex: ^[a-zA-Z_]+$
    # Пинг который должен быть у игрока чтобы не пройти проверку
    # (Это значение представляет собой время в миллисекундах: 1 секунда = 1000 миллисекунд)
    max-ping: 10000
    # Максимальное количество пакетов для входа на сервер, которое игрок должен отправить, чтобы быть выгнанным
    max-login-packets: 256

  # Если включено, игрок будет возвращен на исходный сервер
  # после успешного прохождения проверки на бота.
  # Эта функция была введена Mojang в версии Minecraft 1.20.5
  # Учебник: https://youtu.be/aSWrzQVjGnc?t=71
  transfer:
    # Должен ли Sonar переместить игрока на исходный сервер (вместо выкидывания его)?
    # Для этого необходимо включить функцию в конфигурации вашего сервера
    # Кроме того, вы можете пожелать снизить количество ограничений на скорость входа
    # выполняемых Velocity или другими прокси/плагинами, так как это может помешать
    # корректному перемещению игрока.
    enabled: false
    # На какой сервер должен Sonar переместить игрока после прохождения проверки?
    # Введите IP-адрес сервера, который обычно используется игроками для подключения к вашему серверу.
    # Например, вы можете указать "mc.hypixel.net" или прямой IP-адрес, например "1.1.1.1"
    destination-host: "play.my-server.com"
    # Какой порт должен использовать Sonar при перемещении игрока на исходный сервер?
    # Если ваш сервер не требует порта для подключения, вы можете оставить это как 25565.
    destination-port: 25565

  # Режим игрока во время проверки
  # Возможные типы: SURVIVAL, CREATIVE, ADVENTURE
  # - SURVIVAL: все компоненты пользовательского интерфейса видны
  # - CREATIVE: здоровье и голод скрыты
  # - ADVENTURE: все компоненты пользовательского интерфейса видны
  gamemode: ADVENTURE
  # Sonar кэширует большинство пакетов, которые он отправляет клиенту, включая пакет LoginSuccess.
  # Какое имя пользователя должен использовать Sonar для пакета LoginSuccess?
  # Имя пользователя не будет видно игроку без модификации клиента
  cached-username: "Sonar"
  # Должен ли Sonar регистрировать новые попытки проверки?
  log-connections: true
  # Должен ли Sonar регистрировать новые попытки проверки во время атак?
  log-during-attack: false
  # Должен ли Sonar регистрировать каждое движение/изменение положения во время проверки?
  # Это не рекомендуется для рабочих серверов, но может быть полезно для выявления ошибок.
  debug-xyz-positions: false
  # Следует ли Sonar также проверять игроков Geyser (Bedrock)?
  # Эта функция экспериментальна и может вызывать проблемы
  # Если это отключено, игроки Bedrock будут пропущены
  check-geyser-players: true
  # Время, прошедшее с момента прекращения отправки пакетов игроком до отключения.
  # (Это значение представляет время в миллисекундах: 1 секунда = 1000 миллисекунд)
  read-timeout: 8000
  # Время, прошедшее с момента прекращения отправки сервером пакетов до отключения игрока
  # (Это значение представляет время в миллисекундах: 1 секунда = 1000 миллисекунд)
  write-timeout: 10000
  # Сколько времени игрок должен ждать перед повторным подключением во время проверки
  # (Это значение представляет время в миллисекундах: 1 секунда = 1000 миллисекунд)
  rejoin-delay: 8000
  # Как долго Sonar должен помнить количество неудачных проверок для игрока?
  # (Это значение представляет время в миллисекундах: 1 секунда = 1000 миллисекунд)
  remember-time: 120000
  # Как долго IP-адресу должно быть запрещено входить на сервер, если он слишком часто не проходит проверку?
  # (Это значение представляет время в миллисекундах: 1 секунда = 1000 миллисекунд)
  blacklist-time: 600000
  # Как часто игрок должен проваливать проверку, чтобы попасть в черный список?
  # (Установите это значение на 0, чтобы полностью отключить черный список)
  blacklist-threshold: 2
  # Список протоколов, которые вообще не могут присоединиться к серверу
  # Полный список всех идентификаторов протоколов можно найти здесь:
  # https://wiki.vg/Protocol_version_numbers
  # Например, Minecraft 1.20 имеет ID 763.
  blacklisted-protocols: []
